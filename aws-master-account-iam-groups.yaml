AWSTemplateFormatVersion: '2010-09-09'
Description: 
  This is a sample template to help folks get started on AWS Cross Account Roles. By default all of the users in these groups only 
  have IAM permissions to self manage IAM (password, Enable MFA, etc) and assume others (privilege escalation). MFA must be enabled
  to escalate privileges.
  
Resources:
  
  AWSAdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: AWSAdminGroup
      ManagedPolicyArns: [!Ref IAMSelfManagePolicy,
                          !Ref AssumeReadOnlyRolePolicy,
                          !Ref AssumeAWSAdminRolePolicy]

  DeveloperGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: DeveloperGroup
      ManagedPolicyArns: [!Ref IAMSelfManagePolicy,
                          !Ref AssumeReadOnlyRolePolicy,
                          !Ref AssumeDeveloperRolePolicy]

  ReadOnlyGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: ReadOnlyGroup
      ManagedPolicyArns: [!Ref IAMSelfManagePolicy,
                          !Ref AssumeReadOnlyRolePolicy]



  IAMSelfManagePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: IAMSelfManagePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:  [
                "iam:*AccessKey*",
                "iam:*SSHPublicKey*",
                "iam:*LoginProfile",
                "iam:ChangePassword"
            ]
          Resource: !Join [ "", [ 'arn:aws:iam:', !Sub ':${AWS::AccountId}:', 'user/${aws:username}'] ]
        - Effect: Allow
          Action: [
                "iam:GetAccountPasswordPolicy",
                "iam:ListAccount*",
                "iam:ListUsers",
                "iam:ListMFADevices",
                "iam:ListVirtualMFADevices",
                "iam:GetAccountSummary"]      
          Resource: '*'
        - Effect: Allow
          Action: [               
                "iam:DeactivateMFADevice",
                "iam:EnableMFADevice",
                "iam:ResyncMFADevice"]      
          Resource: !Join [ "", [ 'arn:aws:iam:', !Sub ':${AWS::AccountId}:', 'user/${aws:username}'] ]
        - Effect: Allow
          Action: [              
                "iam:DeleteVirtualMFADevice",
                "iam:CreateVirtualMFADevice"]
          Resource: [
                !Join [ "", [ 'arn:aws:iam:', !Sub ':${AWS::AccountId}:', 'user/${aws:username}'] ],
                !Join [ "", [ 'arn:aws:iam:', !Sub ':${AWS::AccountId}:', 'mfa/${aws:username}'] ]                
            ] 

  AssumeAWSAdminRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AssumeAWSAdminRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:  [
                "sts:AssumeRole"
            ]
          Resource: !Join [ "", [ 'arn:aws:iam::', '*', ':role/AWSAdminRole'] ]
          Condition:
            BoolIfExists:
                aws:MultiFactorAuthPresent: 'true'

  AssumeDeveloperRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AssumeDeveloperRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:  [
                "sts:AssumeRole"
            ]
          Resource: !Join [ "", [ 'arn:aws:iam::', '*', ':role/DeveloperRole'] ]
          Condition:
            BoolIfExists:
                aws:MultiFactorAuthPresent: 'true'


  AssumeReadOnlyRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AssumeReadOnlyRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:  [
                "sts:AssumeRole"
            ]
          Resource: !Join [ "", [ 'arn:aws:iam::', '*', ':role/ReadOnlyRole'] ]
          Condition:
            BoolIfExists:
                aws:MultiFactorAuthPresent: 'true'
