AWSTemplateFormatVersion: 2010-09-09
Description: Configure cross account roles

Parameters:
  MasterAccountId:
    Type: String
    Description: AWS Account Id of the identity/federation account.
    MaxLength: 12
    MinLength: 12
  OperatingRegion:
    Type: String
    Description: This limits the region into which developers can deploy ec2 instances
    Default: "us-west-2"
    AllowedValues: ["us-east-1", "us-east-2", "us-west-1", "us-west-2"]
  Environment:
    Type: String
    Description: Is the current AWS Account a Dev, Test, or Prod Environment
    Default: "prod"
    AllowedValues: ["test", "dev", "prod"]

Conditions:
  NotProductionEnvironment: !Not [!Equals [!Ref Environment, "prod"]]

Resources:
  NetworkAdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: NetworkAdminRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref MasterAccountId
            Action:
              - sts:AssumeRole
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: 'true'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/job-function/NetworkAdministrator
  
  AWSAdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSAdminRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref MasterAccountId
            Action:
              - sts:AssumeRole
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: 'true'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  ReadOnlyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ReadOnlyRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref MasterAccountId
            Action:
              - sts:AssumeRole
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: 'true'

      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess

  DeveloperRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DeveloperRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - !Ref MasterAccountId
          Action:
          - sts:AssumeRole
          Condition:
            Bool:
              aws:MultiFactorAuthPresent: 'true'

      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSServiceCatalogEndUserFullAccess

  DeveloperEC2Policy:
    Type: AWS::IAM::ManagedPolicy
    Condition: NotProductionEnvironment
    Properties:
      ManagedPolicyName: DeveloperEC2Policy
      Roles:
      - !Ref DeveloperRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: CreateSmallInstances
          Effect: Allow
          Action: 
          - ec2:StartInstances
          - ec2:RunInstances
          Resource: 'arn:aws:ec2:*:*:*'
          Condition:
            StringEqualsIfExists:
              ec2:InstanceType:
              - t3.nano
              - t3.micro
              - t3.small
              - t3.medium
              - t3.large
              # If restricting developers to a certain region isn't inline with what you're trying to accomplish,
              # you can remove the ec2:Region constraint below
              ec2:Region: !Ref OperatingRegion
        - Sid: AllowsDevelopersToOnlyManageInstancesCreatedByThem
          Effect: Allow
          Action:
          - ec2:RebootInstances
          - ec2:TerminateInstances
          - ec2:StartInstances
          - ec2:StopInstances
          Resource: '*'
          # This condition assumes you've deployed this solution: https://s3.amazonaws.com/awsiammedia/public/sample/autotagec2resources/AutoTag.template
          # If that isn't the case you should comment out this conditional string
          Condition:
            StringEquals:
              ec2:ResourceTag/PrincipalId: "${aws:userid}"
        - Sid: EC2Permissions
          Effect: Allow
          Action:
          - ec2:CreateVolume
          - ec2:CreateSecurityGroup
          - ec2:AuthorizeSecurityGroupEgress
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:RevokeSecurityGroupEgress
          - ec2:RevokeSecurityGroupIngress
          - ec2:CopySnapshot
          - ec2:ModifySnapshotAttribute
          - ec2:CreateKeyPair
          - ec2:CreateSecurityGroup
          - ec2:CreateSnapshot
          - ec2:ImportSnapshot
          - ec2:CreateImage
          Resource: '*'
        - Sid: CreateTagsOnNewInstances
          Effect: Allow
          Action: 
          - ec2:CreateTags
          Resource: '*'
          Condition:
            StringEquals:
              "ec2:CreateAction": RunInstances
        - Sid: AllowsDevelopersToCreateServiceLinkedRole
          Effect: Allow
          Action: 
          - iam:CreateServiceLinkedRole
          Resource: '*'
        - Sid: GrantAccessToOtherCommonAWSServices
          Effect: Allow
          Action: 
          - lambda:*
          - dynamodb:*
          - ecs:*
          - s3:Get*
          - s3:Put*
          - s3:List*
          - s3:CreateBucket
          - autoscaling:*
          - cloudwatch:*
          - rds:*
          - states:*
          - apigateway:*
          - elb:*
          - sns:*
          - sqs:*
          - elasticbeanstalk:*
          - logs:*
          Resource: '*'
        - Sid: GrantAccessToPassRoles
          Effect: Allow
          Action: iam:PassRole
          Resource: '*'
